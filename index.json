[
{
	"uri": "https://rmrector.github.io/script.artwork.beef/usage/",
	"title": "Installation &amp; usage",
	"tags": [],
	"description": "",
	"content": " Installing Install my dev repository to get updates delivered to you automatically. After the repo is installed, Artwork Beef can be installed from \u0026ldquo;Program add-ons\u0026rdquo;. It can also be installed with a single zip file, but you will have to return here for updates.\nArtwork Helper can be installed with this single installable zip, but it\u0026rsquo;s only necessary if a skin depends on it. Inclusion in the official Kodi repo isn\u0026rsquo;t likely for now, some of this functionality may make its way into Leia so it will probably see some feature churn before long.\nUsage Install it, and configure it to your liking. It is designed to run after library updates with the add-on settings \u0026ldquo;Automatically add artwork for new videos\u0026rdquo; and \u0026ldquo;Automatically add artwork for new music\u0026rdquo;.\nThere are a few actions and settings you may want to flip before letting Artwork Beef do its thing. See First usage for details.\n Over time it will re-process media items still missing artwork, checking for new artwork from web services and the file system. After they have gone out of date they are considered \u0026ldquo;old\u0026rdquo; items affected by a couple of actions and settings.\nYou can also run it from Program add-ons to trigger the automatic process for new or all items, or items old enough to need an update; a currently running process can also be canceled here. To operate on a single media item, open the context menu on that item, then under \u0026ldquo;Manage\u0026hellip;\u0026rdquo; there are options to automatically \u0026ldquo;Add missing artwork\u0026rdquo; or manually \u0026ldquo;Select artwork\u0026hellip;\u0026rdquo;.\nEpisode fanart requires using a scraper that grabs the TheTVDB ID for each episode, like the standard TheTVDB scraper and The Movie Database TV show scraper, or an NFO manager that does the same. You must enable adding episode fanart manually for each series through the add-on settings, as they add a bundle of new API calls to The Movie Database and just aren\u0026rsquo;t available for many series.\nDon\u0026rsquo;t use Artwork Beef\u0026rsquo;s automatic processing with Artwork Downloader\u0026rsquo;s full library mode. The results won\u0026rsquo;t be terrible, but they\u0026rsquo;ll step all over each other and take up extra time and network resources.\n"
},
{
	"uri": "https://rmrector.github.io/script.artwork.beef/usage/firstusage/",
	"title": "First usage",
	"tags": [],
	"description": "",
	"content": " Artwork Beef must process all items in your library, and will do so automatically. There are some artwork in the file system that isn\u0026rsquo;t added to Kodi\u0026rsquo;s database with any/many other tools. It will also check web services for new artwork to fill out any media items still missing some, unless \u0026ldquo;Automatically add artwork from file system only\u0026rdquo; is enabled. If you haven\u0026rsquo;t been managing movie collection artwork, Kodi sets posters and fanart to those of one of the movies in the collection. You may want to run Artwork Beef from Program Add-ons and remove all existing artwork from movie collections before running Artwork Beef\u0026rsquo;s full process. If you manage all of your artwork with image files and/or NFO files, the add-on setting \u0026ldquo;Automatically add artwork from file system only\u0026rdquo; under \u0026ldquo;Advanced\u0026rdquo; will prevent the add-on from querying the web services during automatic processing, saving time and network resources.  You may also want to disable \u0026ldquo;Update artwork for old items daily\u0026rdquo; if you don\u0026rsquo;t frequently add new artwork for existing items in the library.  If you have multiple Kodi devices sharing a MySQL database, only enable the automatic processing on one of them. For multiple Kodi devices with their own databases and you want Artwork Beef to download image files to be shared across them, enable \u0026ldquo;Automatically add artwork from file system only\u0026rdquo; on all but the master Kodi device.  Okay, so these are more interesting just after the first run:\n Grabbing movie collection artwork from web services may not work automatically if the collection name in Kodi doesn\u0026rsquo;t exactly match the collection name on TheMovieDB. After your collections are processed for the first time, run Artwork Beef from Program Add-ons and select \u0026ldquo;identify unmatched sets with TMDb\u0026rdquo; to show a list of all still-unmatched movies collections, then select one and enter the name of the collection exactly as it is on TheMovieDB. If a collection was matched incorrectly, navigate to the collection in the video library and choose \u0026ldquo;Select artwork\u0026hellip;\u0026rdquo; from the \u0026ldquo;Manage\u0026rdquo; menu of the context menu, then choose \u0026ldquo;Search for item\u0026rdquo;. Ditto music video artwork, but when entering the name use [artist name] - [track name] to search on TheAudioDB.  "
},
{
	"uri": "https://rmrector.github.io/script.artwork.beef/skins/",
	"title": "Skin support",
	"tags": [],
	"description": "",
	"content": "For the most part, skins will still access images in the same Kodi standard way. Episode and season fanart may just work, depending on how your skin accesses them when listing episodes or seasons. $INFO[ListItem.Art(fanart)] pulls the episode or season backdrop if it exists, otherwise, Kodi falls back to the series backdrop.\nExtrafanart has been integrated into the library and no longer has to be in the file system, but does require skins to access them differently. Extrathumbs can be similarly integrated. Skins can gather multiple fanart for random display with a fadelabel; see Fun without add-ons for an example.\nArtwork Helper is a small add-on that skins can depend on to more easily gather fanart/thumbs for a multiimage control. It can still have a noticeable delay compared to directly accessing other artwork with ListItem.Art(clearlogo) (especially on Windows), so skins that have a greater focus on fanart will probably prefer the plugin-free route.\nSkins should not list Artwork Beef as a dependency, nor depend on its installation for displaying artwork, as Artwork Beef isn\u0026rsquo;t the only one that can set these. Check for the existence of fanart1 to tell if the ListItem has these multiple fanart.\n"
},
{
	"uri": "https://rmrector.github.io/script.artwork.beef/usage/fromfiles/",
	"title": "Image files",
	"tags": [],
	"description": "",
	"content": " Downloading and managing local artwork files By default, Artwork Beef does not modify existing local artwork files. There are some options to change that, though. With the settings \u0026ldquo;Download artwork for processed [media type]\u0026rdquo; enabled for a media type it will download all remote artwork for processed items, and any new images selected manually. By default most video library images will be saved next to the media files with the most specific file names detailed below, with options to save movie and music video artwork without the base file name if you like, and options to save movie and music video fanart# to an \u0026ldquo;extrafanart\u0026rdquo; directory for skins using the classic style.\n The add-on setting \u0026ldquo;Delete deselected artwork files\u0026rdquo; will delete existing \u0026ldquo;fanart\u0026rdquo; files that are deselected manually in the GUI, to prevent that artwork file from being added back to the library when the media item is next processed. The add-on setting \u0026ldquo;Recycle deleted and replaced files to temp/cache directory\u0026rdquo; will move deleted and replaced artwork to Kodi\u0026rsquo;s temp or cache directory. This is fairly simple and does not check the available space on the drive, and can overwrite the first recycled file if the same art type is modified again.  Artwork file naming conventions for the video library Artwork Beef will pick up any properly named artwork files next to your video files. It has two conventions for loading most artwork: [media base file name]-[art type].[ext] for movies, episodes, and music videos, and [art type].[ext] for TV shows and as a less specific alternative for movies and music videos within their own directories. This generally matches Kodi\u0026rsquo;s file naming conventions.\n[art type] must be alphanumeric, lowercase, and no longer than 20 characters, but can otherwise be freely named. They should exactly match the name that skins can use to access them, and extra fanart are saved as fanart1, fanart2, and so on; the same goes for any other art type you want to save more than one of, though it requires a skin to actually support multiple in some way.\nMovies, episodes, and music videos Artwork for //MRHOOD/Movies/Movie Name (2017)/Base File Name.mkv can generally be stored at //MRHOOD/Movies/Movie Name (2017)/Base File Name-[art type].[ext]. Episode artwork is stored similarly, the important part is that it\u0026rsquo;s in the same directory and has the same base file name as the episode video.\nA few specific examples are\n ... /Movie Name (2017)/Movie File Name-poster.jpg ... /Movie Name (2017)/Movie File Name-fanart.jpg ... /Movie Name (2017)/Movie File Name-fanart1.jpg ... /Movie Name (2017)/Movie File Name-fanart2.jpg ... /Movie Name (2017)/Movie File Name-fanart3.jpg ... /Movie Name (2017)/Movie File Name-clearlogo.png  If your movie or music video library is large, I suggest you keep each item in their own directory for performance reasons. Artwork Beef doesn\u0026rsquo;t work any differently if you keep them all in one directory, but its processing will slow down just like Kodi\u0026rsquo;s library update the more files that are packed together.\nTV shows and alternative for movies and music videos TV shows have a directory associated with them rather than an individual file, so there is no base file name to use. Artwork for //MRHOOD/TVShows/TV Show 1/ can generally be stored at //MRHOOD/TVShows/TV Show 1/[art type].[ext]. Movies and music videos stored in separate directories can also use this style, though if both styles exist for one movie it will choose the other, more specific, one \u0026ndash; handy for 3D or special editions that have their own artwork, if you keep them in the same directory.\nA few specific examples\n ... /TV Show 1/poster.jpg ... /TV Show 1/fanart.jpg ... /TV Show 1/fanart1.jpg ... /TV Show 1/fanart2.jpg ... /TV Show 1/fanart3.jpg ... /TV Show 1/clearlogo.png  Movie collection artwork Movie collection artwork can be pulled from a central directory (configured in the add-on settings) containing artwork named in a similar fashion to the second option above. Movie collections generally don\u0026rsquo;t have an individual file nor folder they can call their own, so instead use the set\u0026rsquo;s name as the directory name.\nA few specific examples are\n ... /[central movie set info directory]/Movie Collection Name/poster.jpg ... /[central movie set info directory]/Movie Collection Name/fanart.jpg ... /[central movie set info directory]/Movie Collection Name/fanart1.jpg ... /[central movie set info directory]/Movie Collection Name/clearlogo.png  Music artwork Music artwork is gathered from and downloaded to the \u0026ldquo;Artist information folder\u0026rdquo; setting in Kodi, added in 18 Leia under \u0026ldquo;Media settings\u0026rdquo;, \u0026ldquo;Music\u0026rdquo;, \u0026ldquo;Library\u0026rdquo;. The results are structured as\n ... /[Artist information folder]/[artist name]/thumb.jpg ... /[Artist information folder]/[artist name]/fanart.jpg ... /[Artist information folder]/[artist name]/fanart1.jpg ... /[Artist information folder]/[artist name]/clearlogo.png for artist artwork ... /[Artist information folder]/[artist name]/[album name]/thumb.jpg ... /[Artist information folder]/[artist name]/[album name]/back.jpg ... /[Artist information folder]/[artist name]/[album name]/spine.jpg ... /[Artist information folder]/[artist name]/[album name]/discart.png for album artwork ... /[Artist information folder]/[artist name]/[album name]/[song name]-thumb.jpg for song artwork  When there is more than one artist with the same name, the first four characters of the artist MusicBrainz ID is add to the end of the folder like [artist name]_12fe. Same goes when there is more than one album with the same name for a single artist (like remasters or other recordings), with the album / release MusicBrainz ID (not release group).\nArtwork Beef will also identify album and song artwork next to the song files if all songs for one album are in a single folder, and don\u0026rsquo;t share that folder with songs from any other album. Song artwork organized this way must match the base name of the song file, rather than just the song name as when in the artist folder. There is also an option to save album and song artwork to this directory if possible.\nFile system safe names For music and movie set artwork, the file name is made from the title or name of items, which may not be safe for the file system with characters like :?\u0026quot;/\\\u0026lt;\u0026gt;*|. Replace these characters with an underscore \u0026lsquo;_\u0026lsquo;, and make sure file names do not end with a space or period. Artwork Beef will be more lenient in its matching to catch other styles, but those two simple rules should steer true.\nLegacy names It will also pull in artwork files that match Artwork Downloader file names, in cases where they are different than the art types used in Kodi; for instance, logo.png is added as clearlogo and extrafanart are added as fanart#. Ditto Movie Set Artwork Automator, but only for its default file names (logo.png to clearlogo, folder.jpg to thumb). This is controlled with an add-on setting, enabled by default. It also supports other file paths that MSAA supported, though I do not suggest you use them for a new setup.\n"
},
{
	"uri": "https://rmrector.github.io/script.artwork.beef/examples/",
	"title": "Examples",
	"tags": [],
	"description": "",
	"content": " Episode fanart Early look at episode fanart from Copacetic skin.\nCharacterart And multiple characterart "
},
{
	"uri": "https://rmrector.github.io/script.artwork.beef/skins/addonfreefun/",
	"title": "Fun without add-ons",
	"tags": [],
	"description": "",
	"content": " Because who wants another dependency?\nDisplay multiple fanart Artwork Helper isn\u0026rsquo;t strictly needed, how about that? It is a bit more work though.\nThe trick is to use a fadelabel control to gather multiple InfoLabels and randomize them, then use that control\u0026rsquo;s label as the final image to be displayed.\n\u0026lt;control type=\u0026quot;fadelabel\u0026quot; id=\u0026quot;398045\u0026quot;\u0026gt; \u0026lt;description\u0026gt;Randomizer for plugin-free multiple fanart\u0026lt;/description\u0026gt; \u0026lt;top\u0026gt;-1000\u0026lt;/top\u0026gt; \u0026lt;!-- Don't need to see it, but can't change its visibility. Put it off screen --\u0026gt; \u0026lt;width\u0026gt;1\u0026lt;/width\u0026gt; \u0026lt;height\u0026gt;1\u0026lt;/height\u0026gt; \u0026lt;info\u0026gt;ListItem.Art(fanart)\u0026lt;/info\u0026gt; \u0026lt;info\u0026gt;ListItem.Art(fanart1)\u0026lt;/info\u0026gt; \u0026lt;info\u0026gt;ListItem.Art(fanart2)\u0026lt;/info\u0026gt; \u0026lt;!-- ... repeat for each numbered fanart --\u0026gt; \u0026lt;info\u0026gt;ListItem.Art(fanart9)\u0026lt;/info\u0026gt; \u0026lt;!-- tvshow.fanart are filled with the series fanart when navigating season and episode lists --\u0026gt; \u0026lt;info\u0026gt;ListItem.Art(tvshow.fanart)\u0026lt;/info\u0026gt; \u0026lt;info\u0026gt;ListItem.Art(tvshow.fanart1)\u0026lt;/info\u0026gt; \u0026lt;info\u0026gt;ListItem.Art(tvshow.fanart2)\u0026lt;/info\u0026gt; \u0026lt;!-- ... repeat for each numbered fanart --\u0026gt; \u0026lt;info\u0026gt;ListItem.Art(tvshow.fanart9)\u0026lt;/info\u0026gt; \u0026lt;!-- Container.ListItem.Art() are filled based on the focused ListItem in the **focused container** in Leia --\u0026gt; \u0026lt;info\u0026gt;Container.ListItem.Art(fanart)\u0026lt;/info\u0026gt; \u0026lt;info\u0026gt;Container.ListItem.Art(fanart1)\u0026lt;/info\u0026gt; \u0026lt;info\u0026gt;Container.ListItem.Art(fanart2)\u0026lt;/info\u0026gt; \u0026lt;info\u0026gt;Container.ListItem.Art(tvshow.fanart)\u0026lt;/info\u0026gt; \u0026lt;info\u0026gt;Container.ListItem.Art(tvshow.fanart1)\u0026lt;/info\u0026gt; \u0026lt;info\u0026gt;Container.ListItem.Art(tvshow.fanart2)\u0026lt;/info\u0026gt; \u0026lt;randomize\u0026gt;true\u0026lt;/randomize\u0026gt; \u0026lt;pauseatend\u0026gt;30000\u0026lt;/pauseatend\u0026gt; \u0026lt;!-- Time to show each image, in milliseconds --\u0026gt; \u0026lt;!-- No scrolling so only the pauseatend above (plus a short fade-in) affects length of time each image is shown --\u0026gt; \u0026lt;scroll\u0026gt;false\u0026lt;/scroll\u0026gt; \u0026lt;scrollout\u0026gt;false\u0026lt;/scrollout\u0026gt; \u0026lt;!-- Resets the timer when navigating to a new item, so each item's first visible fanart will show for the full amount of time --\u0026gt; \u0026lt;resetonlabelchange\u0026gt;true\u0026lt;/resetonlabelchange\u0026gt; \u0026lt;/control\u0026gt;  With that on your window, the InfoLabel $INFO[Control.GetLabel(398045)] will contain the URL/path to a single image that can be given to an image or multiimage path, and it will randomly rotate through every available image. It will skip any that are empty, so no blank spaces will be left.\nYou can make another structure with Player.Art for music visualization or a fullscreen now-playing window.\nGrab random fanart (plus any other info) from items in any library path Stick this little invisible list on your window somewhere:\n\u0026lt;control type=\u0026quot;list\u0026quot; id=\u0026quot;12341\u0026quot;\u0026gt; \u0026lt;content sortby=\u0026quot;random\u0026quot;\u0026gt;videodb://movies/titles/\u0026lt;/content\u0026gt; \u0026lt;autoscroll time=\u0026quot;30000\u0026quot;\u0026gt;true\u0026lt;/autoscroll\u0026gt; \u0026lt;!-- Time to show each image, in milliseconds --\u0026gt; \u0026lt;itemlayout /\u0026gt; \u0026lt;focusedlayout /\u0026gt; \u0026lt;/control\u0026gt;  The path in the \u0026lt;content\u0026gt; element can be any path that Kodi supports, including any videodb paths in the library, playlists, and plugins, as long as it directly contains items with fanart.\nThen $INFO[Container(12341).ListItem.Art(fanart)] will contain the URL/path to a single image that can be given to an image or multiimage path, and it will randomly rotate through every item in the list. Use any other ListItem InfoLabels as you need them.\nOn MyVideoNav, when navigating categories like genres, studios, and years, this can pull fanart from items in just the focused category item by using $INFO[ListItem.FolderPath] for the \u0026lt;content\u0026gt; element. Big lists can take some time to fill when a new path is added, so add a limit=\u0026quot;20\u0026quot; attribute to the element.\nThis can be combined with \u0026ldquo;Display multiple fanart\u0026rdquo; above to pick from all fanart set for all items in the list. Set the fadelabel timer to be longer than this list to still display just one image from each item, or shorter to flip through more than one fanart for each item.\nFun path options  All movies - videodb://movies/titles/ All TV shows - videodb://tvshows/titles/ All music artists - musicdb://artists/ Skin playlists - special://skin/playlists/random_albums.xsp User playlists - special://profile/playlists/video/latest_episodes.xsp Custom video nodes to separate concerts/children\u0026rsquo;s shows/sports games/etc  library://video/movies/concerts.xml/ library://video/movies/notconcerts.xml/ library://video/tvshows/children.xml/ library://video/tvshows/notchildren.xml/ playlists can be used for similar purposes   Combining multiple paths One limitation of this vs an add-on is that there is no global library list that includes every media item in the library. Kodi 18 Leia adds a new feature that may convincingly accomplish something similar. Multiple content elements can be provided, so replace the single \u0026lt;content\u0026gt; above with something like below:\n\u0026lt;content sortby=\u0026quot;random\u0026quot; limit=\u0026quot;5\u0026quot;\u0026gt;videodb://movies/titles/\u0026lt;/content\u0026gt; \u0026lt;content sortby=\u0026quot;random\u0026quot; limit=\u0026quot;5\u0026quot;\u0026gt;videodb://musicvideos/titles/\u0026lt;/content\u0026gt; \u0026lt;content sortby=\u0026quot;random\u0026quot; limit=\u0026quot;5\u0026quot;\u0026gt;videodb://tvshows/titles/\u0026lt;/content\u0026gt; \u0026lt;content sortby=\u0026quot;random\u0026quot; limit=\u0026quot;5\u0026quot;\u0026gt;videodb://movies/sets/\u0026lt;/content\u0026gt; \u0026lt;content sortby=\u0026quot;random\u0026quot; limit=\u0026quot;5\u0026quot;\u0026gt;musicdb://artists/\u0026lt;/content\u0026gt; \u0026lt;content sortby=\u0026quot;random\u0026quot; limit=\u0026quot;5\u0026quot;\u0026gt;videodb://movies/titles/\u0026lt;/content\u0026gt; \u0026lt;content sortby=\u0026quot;random\u0026quot; limit=\u0026quot;5\u0026quot;\u0026gt;videodb://musicvideos/titles/\u0026lt;/content\u0026gt; \u0026lt;content sortby=\u0026quot;random\u0026quot; limit=\u0026quot;5\u0026quot;\u0026gt;videodb://movies/sets/\u0026lt;/content\u0026gt; \u0026lt;content sortby=\u0026quot;random\u0026quot; limit=\u0026quot;5\u0026quot;\u0026gt;videodb://tvshows/titles/\u0026lt;/content\u0026gt; \u0026lt;content sortby=\u0026quot;random\u0026quot; limit=\u0026quot;5\u0026quot;\u0026gt;musicdb://artists/\u0026lt;/content\u0026gt;  The limit is low to avoid grouping too many of the same item together (\u0026ldquo;That\u0026rsquo;s not very random!\u0026rdquo;), and then repeat the available paths at least once to add back a bit of variety.\nDoes an episode or season have its own fanart? If ListItem.Art(fanart) is the same image as ListItem.Art(tvshow.fanart) then it is a fallback image and the episode doesn\u0026rsquo;t have its own. A variable value like below will show the single fanart image alone, because an episode with its own fanart is fancy.\n\u0026lt;value condition=\u0026quot;[Container.Content(episodes) | Container.Content(seasons)] + !String.IsEqual(ListItem.Art(tvshow.fanart), ListItem.Art(fanart))\u0026quot;\u0026gt;$INFO[ListItem.Art(fanart)]\u0026lt;/value\u0026gt;  "
},
{
	"uri": "https://rmrector.github.io/script.artwork.beef/skins/artworkhelper/",
	"title": "Artwork helper",
	"tags": [],
	"description": "",
	"content": " Artwork Helper provides skins with a few options for building a list of images for a multiimage or list control from images available via InfoLabels. This is a small add-on that skins can use as a dependency, only doing what a skin asks it to do.\nCurrent version only works for Kodi 17 and 18, use version 0.7.1 for 15 and 16.\nAdd-on setting There is an add-on setting to pull extrafanart and extrathumbs from the filesystem, if there is only a single image in the library. It is off by default, but can be turned on by the end user/viewer. This setting is not needed if Artwork Beef is used to manage artwork. It can be found by navigating to Kodi settings -\u0026gt; System settings -\u0026gt; Add-ons -\u0026gt; Manage dependencies -\u0026gt; Artwork Helper. The Settings level may need to be set to Advanced to see dependencies in \u0026ldquo;Add-ons\u0026rdquo;.\nPaths built from InfoLabels These paths use InfoLabels to gather image URLs just like skins do.\nListItem multi image plugin path The simplest form grabs multiple images for the currently focused ListItem.\nplugin://script.artwork.helper/multiimage/listitem/?refresh=$INFO[ListItem.Label]\nMostly for fanart (fanart#), but works for any art type that has one or more images. Additional query params are available to modify its behavior, separate them with \u0026amp;amp;\u0026amp;amp;.\n refresh is required to get Kodi to fire off the plugin when the focused item changes. Set it to something that will change when the fanart should change, like ListItem.Label containerid points to the current ListItem in a specific container; either leave blank for the currently selected container on the Kodi 18 home window, or set to the desired container\u0026rsquo;s skin ID arttype lets you select different artwork. Defaults to \u0026lsquo;fanart\u0026rsquo;. allartists includes artwork for all artists, including \u0026lsquo;artist\u0026rsquo; and \u0026lsquo;albumartist\u0026rsquo; plus \u0026lsquo;artist1\u0026rsquo;, \u0026lsquo;albumartist1\u0026rsquo; for duets or more. For the music library in Kodi 18 and up. Only takes effect when arttype is \u0026ldquo;artist.[arttype]\u0026rdquo; or \u0026ldquo;albumartist.[arttype]\u0026ldquo;.  With the full complement of options:\nplugin://script.artwork.helper/multiimage/listitem/?refresh=$INFO[Container.ListItem.Label]\u0026amp;amp;\u0026amp;amp;containerid=\u0026amp;amp;\u0026amp;amp;arttype=artist.fanart\u0026amp;amp;\u0026amp;amp;allartists=true\nContainer multi image plugin path This grabs multiple images for the current skin Container.\nplugin://script.artwork.helper/multiimage/container/?refresh=$INFO[Container.FolderName]\nAdditional query params are available to modify its behavior, separate them with \u0026amp;amp;\u0026amp;amp;.\n refresh is required to get Kodi to fire off the plugin when the focused item changes. Set it to something that will change when the fanart should change, like Container.FolderName arttype lets you select different artwork. Defaults to \u0026lsquo;tvshow.fanart\u0026rsquo;. allartists includes artwork for all artists. Only takes effect when arttype is \u0026ldquo;artist.[arttype]\u0026rdquo; or \u0026ldquo;albumartist.[arttype]\u0026ldquo;.  With some options:\nplugin://script.artwork.helper/multiimage/container/?refresh=$INFO[ListItem.Label]\u0026amp;amp;\u0026amp;amp;arttype=set.fanart\nPlayer multi image plugin path This grabs multiple images for the currently playing media.\nplugin://script.artwork.helper/multiimage/player/?refresh=$INFO[Player.FolderName]\nAdditional query params are available to modify its behavior, separate them with \u0026amp;amp;\u0026amp;amp;.\n refresh is required to get Kodi to fire off the plugin when the focused item changes. Set it to something that will change when the fanart should change, like Container.FolderName arttype lets you select different artwork. Defaults to \u0026lsquo;artist.fanart\u0026rsquo;. allartists includes artwork for all artists. Defaults to \u0026lsquo;true\u0026rsquo; when arttype is \u0026ldquo;artist.[arttype]\u0026rdquo; or \u0026ldquo;albumartist.[arttype]\u0026ldquo;, no effect otherwise.  With the full complement of options:\nplugin://script.artwork.helper/multiimage/container/?refresh=$INFO[ListItem.Label]\u0026amp;amp;\u0026amp;amp;arttype=albumartist.fanart\u0026amp;amp;\u0026amp;amp;allartists=false\nSmart series multi image plugin path This grabs multiple images for the current series, keeping the path the same through series-season-episode lists so that the fanart display stays smooth (only on the video library window). plugin://script.artwork.helper/multiimage/smartseries/?title=$INFO[ListItem.Title]\nAdditional query params are available to modify its behavior, separate them with \u0026amp;amp;\u0026amp;amp;.\n title is required to get Kodi to fire off the plugin when the focused item changes, like \u0026lsquo;refresh\u0026rsquo; in ListItem/Container paths. Set it to ListItem.Title if Container.Content is tvshows and Container.TVShowTitle if seasons/episodes. arttype lets you select different artwork. Defaults to \u0026lsquo;fanart\u0026rsquo;. Use only the base art type like \u0026lsquo;fanart\u0026rsquo;, the plugin will decide if tvshow.* is needed.  With the full complement of options:\nplugin://script.artwork.helper/multiimage/smartseries/?title=$INFO[ListItem.Title]\u0026amp;amp;\u0026amp;amp;arttype=fanart\nplugin://script.artwork.helper/multiimage/smartseries/?title=$INFO[Container.TVShowTitle]\u0026amp;amp;\u0026amp;amp;arttype=fanart\nArbitrary images plugin path This format lets you stitch any images together into a list by specifying their paths.\nplugin://script.artwork.helper/multiimage/?image=\u0026lt;image_path\u0026gt;\u0026amp;amp;\u0026amp;amp;image=\u0026lt;image_path\u0026gt;\u0026amp;amp;\u0026amp;amp;image=\u0026lt;image_path\u0026gt;\u0026amp;amp;\u0026amp;amp;image=\u0026lt;image_path\u0026gt;\u0026amp;amp;\u0026amp;amp;image=\u0026lt;image_path\u0026gt;\u0026amp;amp;\u0026amp;amp;image=\u0026lt;image_path\u0026gt;\nWhen the ListItem option above doesn\u0026rsquo;t work for you, this is your very wordy friend. Repeat the image block for as many images as you like, and it will ignore empty ones. The double ampersand \u0026amp;amp;\u0026amp;amp; separator between images is required.\nThis path doesn\u0026rsquo;t read any InfoLabels like the others, just returning the images you gave it into a format that multiimage or list controls can use. You can of course pass in the image paths from the InfoLabels yourself.\n"
},
{
	"uri": "https://rmrector.github.io/script.artwork.beef/skins/whyreplaceextra/",
	"title": "Why replace extrafanart/extrathumbs",
	"tags": [],
	"description": "",
	"content": " Kodi\u0026rsquo;s support for freely named artwork in the library is pretty great, so let\u0026rsquo;s use it! Placing artwork in the library allows skins to work with multiple fanart no matter where they are stored. Avoid filesystem delays/access issues (unavailable network file system, removable media) when the images have been cached. Classic extrafanart always hits the file system at least once when first listing the path to get a list of the images, even if they are all cached. Skins can more easily work with all fanart together (main + extra fanart)  Display them in a multiimage control with a skin structure described in Fun without add-ons. There are also plugin:// paths to accomplish this. See Artwork Helper.  Skins can look up each fanart image directly, which makes it simpler to display more than one at a time in arbitrary locations.  Probably overkill for fanart, but other art types could be multiplied for great effect. I\u0026rsquo;ve been playing with characterart.  It works for items in the library that may not point to a location on a file system that should even care about artwork on this/any level, maybe a movie from UPNP or whatever. Plugins can fill their own ListItems with this artwork, which skins can access in exactly the same way. Should generally work for other library items that can have freely named artwork; movie sets, music videos, TV show seasons, episodes, even music artists, albums, and songs. Get that gross nasty other stuff out of your file system, if you also think it is gross and nasty.  Ugh. This is of course the simplest and most obvious way to share information among different Kodi installs, so maybe I\u0026rsquo;m a bit unreasonable here.   "
},
{
	"uri": "https://rmrector.github.io/script.artwork.beef/",
	"title": "Artwork Beef",
	"tags": [],
	"description": "",
	"content": " Artwork Beef An add-on for Kodi Artwork Beef automatically adds extra artwork for media in your media libraries. It is generally intended to handle extended artwork just as Kodi and scrapers already do for basic artwork. It grabs artwork from the file system and wonderful web services fanart.tv, TheTVDB.com, The Movie Database, and TheAudioDB.com.\nIt is developed for Kodi 17 Krypton, and should also work for 16 Jarvis and 18 Leia. 15 Isengard should mostly still work, but it\u0026rsquo;s really time to update.\nSupport and feedback thread on the Kodi forums.\nSource hosted on GitHub.\nIt fully supports series and season artwork from TheTVDB.com; movie, movie set, music video, series, and season artwork from fanart.tv; movie and movie set artwork from The Movie Database; and music video artwork from TheAudioDB. For those series that really pop, high-quality fanart for each episode can be added from The Movie Database. The music library is supported in Kodi 18 Leia for artists, albums, and songs, with artwork from TheAudioDB and fanart.tv.\nThe full list of artwork types grabbed from external web services:\n   media type art types     movies and movie sets poster, fanart, banner, clearlogo, landscape, clearart, discart   music videos poster (album/single cover), discart, fanart, artistthumb, banner, clearlogo, clearart, landscape   series poster, fanart, banner, clearlogo, landscape, clearart, characterart   seasons poster, fanart, banner, landscape   episodes fanart   artists thumb, fanart, banner, clearlogo, clearart, landscape   albums thumb (album cover), discart, back, spine   songs thumb (single cover)    Local artwork stored in the file system is preferred if it exists, and Artwork Beef can be configured to download other artwork that is added.\nVersion changelog\n"
},
{
	"uri": "https://rmrector.github.io/script.artwork.beef/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://rmrector.github.io/script.artwork.beef/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]